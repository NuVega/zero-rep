from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from binance.spot import Spot
from datetime import datetime, timedelta
from statistics import mean

router = Router()
client = Spot()

def get_volume_ratio(symbol: str):
    try:
        now = datetime.utcnow()
        today_str = now.strftime("%Y-%m-%d")
        hour = now.hour

        # –ü–æ–ª—É—á–∞–µ–º 30 –¥–Ω–µ–π —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
        klines = client.klines(symbol.upper(), "1h", limit=24 * 30)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–≤–µ—á–∏ –ø–æ –¥–Ω—è–º
        daily_volumes = {}

        for k in klines:
            ts = datetime.utcfromtimestamp(k[0] // 1000)
            day = ts.strftime("%Y-%m-%d")
            if ts.hour >= hour:
                continue
            vol = float(k[5])
            daily_volumes.setdefault(day, []).append(vol)

        if today_str in daily_volumes:
            del daily_volumes[today_str]

        # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞
        volumes_up_to_hour = [sum(v) for v in daily_volumes.values() if len(v) >= hour]
        average_volume = mean(volumes_up_to_hour)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        today_klines = client.klines(symbol.upper(), "1h", limit=hour)
        today_volume = sum(float(k[5]) for k in today_klines)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = client.ticker_price(symbol=symbol)
        price = float(ticker["price"])

        ratio = today_volume / average_volume if average_volume else 0

        return {
            "price": price,
            "today_volume": today_volume,
            "average_volume": average_volume,
            "ratio": ratio
        }

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"

@router.message(Command("btc"))
async def volume_command(message: Message):
    result = get_volume_ratio("BTCUSDT")

    if isinstance(result, str):
        await message.answer(result)
        return

    ratio = result["ratio"]
    status = (
        "‚¨ÜÔ∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º" if ratio > 1.2 else
        "‚¨áÔ∏è –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–º" if ratio < 0.8 else
        "‚ûñ –û–±—ä–µ–º –≤ –Ω–æ—Ä–º–µ"
    )

    await message.answer(
        f"<b>BTCUSDT</b>\n"
        f"üí∞ –¶–µ–Ω–∞: {result['price']:.2f}\n"
        f"üìä –û–±—ä–µ–º —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è: {result['today_volume']:.2f}\n"
        f"üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {result['average_volume']:.2f}\n"
        f"{status}"
    )

@router.message(Command("eth"))
async def volume_eth(message: Message):
    result = get_volume_ratio("ETHUSDT")

    if isinstance(result, str):
        await message.answer(result)
        return

    ratio = result["ratio"]
    status = (
        "‚¨ÜÔ∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º" if ratio > 1.2 else
        "‚¨áÔ∏è –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–º" if ratio < 0.8 else
        "‚ûñ –û–±—ä–µ–º –≤ –Ω–æ—Ä–º–µ"
    )

    await message.answer(
        f"<b>ETHUSDT</b>\n"
        f"üí∞ –¶–µ–Ω–∞: {result['price']:.2f}\n"
        f"üìä –û–±—ä–µ–º —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è: {result['today_volume']:.2f}\n"
        f"üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {result['average_volume']:.2f}\n"
        f"{status}"
    )