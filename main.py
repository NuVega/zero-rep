import tkinter as tk
from tkinter import messagebox, ttk, simpledialog
import json
import os

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
tasks_data = []
task_id_counter = 0
categories = []
category_trees = {}
previous_tab = None
deleting_category = False  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
drag_data = {"task_id": None, "widget": None, "category": None, "y": 0}

def save_categories():
    with open("categories.json", "w", encoding='utf-8') as file:
        json.dump(categories, file, ensure_ascii=False)

def load_categories():
    global categories
    if os.path.exists("categories.json"):
        with open("categories.json", "r", encoding='utf-8') as file:
            categories = json.load(file)
    else:
        categories = ["–î–æ–º", "–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ"]

def add_category_tab(category_name, insert_before_plus=True):
    frame = ttk.Frame(notebook)
    tree = ttk.Treeview(frame, columns=("Task", "Priority", "Status"), show="headings")
    tree.heading("Task", text="–ó–∞–¥–∞—á–∞")
    tree.heading("Priority", text="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
    tree.heading("Status", text="–°—Ç–∞—Ç—É—Å")

    tree.column("Task", width=200, anchor="w")
    tree.column("Priority", width=100, anchor="w")
    tree.column("Status", width=100, anchor="w")

    tree.pack(fill="both", expand=True)
    category_trees[category_name] = tree

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∫–ª–∞–¥–∫–∏ "+"
    tab_ids = notebook.tabs()
    plus_tab_present = any(notebook.tab(tab_id, "text") == "+" for tab_id in tab_ids)

    if insert_before_plus and plus_tab_present:
        index = notebook.index("end") - 1
        notebook.insert(index, frame, text=category_name)
    else:
        notebook.add(frame, text=category_name)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    tree.bind('<<TreeviewSelect>>', update_mark_button_text)

def on_tab_changed(event):
    global previous_tab, deleting_category
    selected_tab = notebook.select()
    tab_text = notebook.tab(selected_tab, "text")

    if tab_text == "+":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–∏ —Å–µ–π—á–∞—Å —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if deleting_category:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
            deleting_category = False
            previous_tab = selected_tab
            return  # –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ

        new_category_name = simpledialog.askstring("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        if new_category_name:
            if new_category_name in category_trees:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                notebook.select(previous_tab)
            else:
                add_category_tab(new_category_name)
                categories.append(new_category_name)
                save_categories()
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
                notebook.select(notebook.tabs()[-2])
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É
            notebook.select(previous_tab)
    else:
        previous_tab = selected_tab

def load_tasks():
    global tasks_data, task_id_counter, previous_tab

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º previous_tab
    previous_tab = None

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    load_categories()

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in categories:
        add_category_tab(category, insert_before_plus=False)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É "+"
    plus_tab = ttk.Frame(notebook)
    notebook.add(plus_tab, text="+")

    previous_tab = notebook.tabs()[0]  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏

    notebook.bind("<<NotebookTabChanged>>", on_tab_changed)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
    if os.path.exists("tasks.json"):
        with open("tasks.json", "r", encoding='utf-8') as file:
            tasks_data = json.load(file)
            if tasks_data:
                max_id = max(task['id'] for task in tasks_data)
                task_id_counter = max_id + 1
            else:
                task_id_counter = 0
    else:
        tasks_data = []
    update_task_list()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
def save_tasks():
    with open("tasks.json", "w", encoding='utf-8') as file:
        json.dump(tasks_data, file, ensure_ascii=False)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
def get_priority_symbol(priority):
    symbols = {
        "High": "üî¥ High",
        "Medium": "üü† Medium",
        "Low": "üü¢ Low"
    }
    return symbols.get(priority, priority)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
def update_task_list():
    for tree in category_trees.values():
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        tree.tag_configure('completed', foreground='grey')

        for item in tree.get_children():
            tree.delete(item)

    for task in tasks_data:
        task_id = task["id"]
        text = task["text"]
        completed = task["completed"]
        priority = task.get("priority", "Medium")
        category = task.get("category", "–î–æ–º")
        if category not in category_trees:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        tree = category_trees[category]

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_text = get_priority_symbol(priority)

        # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status_text = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed else "–ê–∫—Ç–∏–≤–Ω–æ"

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        text_display = text

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        tags = ('completed',) if completed else ()

        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–µ–≥–æ–º
        tree.insert(
            "", "end", iid=str(task_id),
            values=(text_display, priority_text, status_text),
            tags=tags
        )

def add_task():
    global task_id_counter
    task_text = task_entry.get()
    priority = priority_var.get()
    category = notebook.tab(notebook.select(), "text")
    if task_text and category != "+":
        task = {
            "id": task_id_counter,
            "text": task_text,
            "completed": False,
            "priority": priority,
            "category": category
        }
        tasks_data.append(task)
        task_id_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        update_task_list()
        task_entry.delete(0, tk.END)
        save_tasks()
        update_mark_button_text()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

def delete_task():
    category = notebook.tab(notebook.select(), "text")
    if category == "+":
        return
    tree = category_trees[category]
    selected_item = tree.selection()
    if selected_item:
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É?"):
            task_id = int(selected_item[0])
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ tasks_data
            for task in tasks_data:
                if task["id"] == task_id:
                    tasks_data.remove(task)
                    break
            update_task_list()
            save_tasks()
            update_mark_button_text()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

def mark_task():
    category = notebook.tab(notebook.select(), "text")
    if category == "+":
        return
    tree = category_trees[category]
    selected_item = tree.selection()
    if selected_item:
        task_id = int(selected_item[0])
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ tasks_data
        for task in tasks_data:
            if task["id"] == task_id:
                task["completed"] = not task["completed"]
                break
        update_task_list()
        save_tasks()
        update_mark_button_text()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

def open_edit_task_window(task):
    edit_window = tk.Toplevel(root)
    edit_window.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")

    tk.Label(edit_window, text="–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
    text_var = tk.StringVar(value=task["text"])
    text_entry = ttk.Entry(edit_window, textvariable=text_var, width=30)
    text_entry.grid(row=0, column=1, padx=5, pady=5)

    tk.Label(edit_window, text="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:").grid(row=1, column=0, padx=5, pady=5, sticky="w")
    priority_var = tk.StringVar(value=task.get("priority", "Medium"))
    priority_menu = ttk.Combobox(edit_window, textvariable=priority_var, values=["High", "Medium", "Low"], state="readonly", width=10)
    priority_menu.grid(row=1, column=1, padx=5, pady=5)

    tk.Label(edit_window, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=2, column=0, padx=5, pady=5, sticky="w")
    category_var = tk.StringVar(value=task.get("category", "–î–æ–º"))
    category_menu = ttk.Combobox(edit_window, textvariable=category_var, values=categories, state="readonly", width=15)
    category_menu.grid(row=2, column=1, padx=5, pady=5)

    def save_changes():
        task["text"] = text_var.get()
        task["priority"] = priority_var.get()
        old_category = task["category"]
        new_category = category_var.get()
        task["category"] = new_category
        task["completed"] = task.get("completed", False)

        if old_category != new_category:
            update_task_list()
        else:
            update_task_in_tree(task)

        save_tasks()
        edit_window.destroy()

    save_button = ttk.Button(edit_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_changes)
    save_button.grid(row=3, column=0, columnspan=2, pady=10)

    edit_window.grab_set()

def edit_task():
    category = notebook.tab(notebook.select(), "text")
    if category == "+":
        return
    tree = category_trees[category]
    selected_item = tree.selection()
    if selected_item:
        task_id = int(selected_item[0])
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ tasks_data
        for task in tasks_data:
            if task["id"] == task_id:
                open_edit_task_window(task)
                break

def update_task_in_tree(task):
    task_id = task["id"]
    text = task["text"]
    completed = task["completed"]
    priority = task.get("priority", "Medium")
    category = task.get("category", "–î–æ–º")
    tree = category_trees[category]

    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    priority_text = get_priority_symbol(priority)

    # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    status_text = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed else "–ê–∫—Ç–∏–≤–Ω–æ"

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    text_display = text

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    tags = ('completed',) if completed else ()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Treeview
    tree.item(str(task_id), values=(text_display, priority_text, status_text), tags=tags)

def sort_tasks_alphabetically():
    tasks_data.sort(key=lambda x: x["text"])
    update_task_list()
    save_tasks()

def sort_tasks_by_addition():
    tasks_data.sort(key=lambda x: x["id"])
    update_task_list()
    save_tasks()

def update_mark_button_text(event=None):
    category = notebook.tab(notebook.select(), "text")
    if category == "+":
        return
    tree = category_trees[category]
    selected_item = tree.selection()
    if selected_item:
        task_id = int(selected_item[0])
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ tasks_data
        for task in tasks_data:
            if task["id"] == task_id:
                if task["completed"]:
                    mark_button.configure(text="–í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ")
                else:
                    mark_button.configure(text="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
                break
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        mark_button.configure(text="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")

def delete_category():
    global categories, deleting_category
    category = notebook.tab(notebook.select(), "text")
    if category == "+":
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≤–∫–ª–∞–¥–∫—É.")
        return

    if messagebox.askyesno("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –∑–∞–¥–∞—á–∏?"):
        deleting_category = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        global tasks_data
        tasks_data = [task for task in tasks_data if task["category"] != category]
        save_tasks()

        # –£–¥–∞–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        tab_id = notebook.select()
        notebook.forget(tab_id)

        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        categories.remove(category)
        save_categories()

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ category_trees
        del category_trees[category]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        update_task_list()

        # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–¥–µ—Å—å

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤–∫–ª–∞–¥–∫—É, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Å—Ç–∞–ª–∏—Å—å
        if categories:
            notebook.select(notebook.tabs()[0])  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        else:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "+"
            notebook.select(notebook.tabs()[-1])

        messagebox.showinfo("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞", f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
root = tk.Tk()
root.title("Task List")

style = ttk.Style()
style.theme_use('clam')

main_frame = ttk.Frame(root, padding="10")
main_frame.pack(fill="both", expand=True)

task_frame = ttk.Frame(main_frame)
task_frame.pack(fill="x", pady=5)

task_label = ttk.Label(task_frame, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É:")
task_label.pack(side="left", padx=5)

task_entry = ttk.Entry(task_frame, width=30)
task_entry.pack(side="left", padx=5)

priority_label = ttk.Label(task_frame, text="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:")
priority_label.pack(side="left", padx=5)

priority_var = tk.StringVar(value="Medium")
priority_menu = ttk.Combobox(task_frame, textvariable=priority_var, values=["High", "Medium", "Low"], state="readonly", width=10)
priority_menu.pack(side="left", padx=5)

add_task_button = ttk.Button(task_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", command=add_task)
add_task_button.pack(side="left", padx=5)

button_frame = ttk.Frame(main_frame)
button_frame.pack(fill="x", pady=5)

edit_button = ttk.Button(button_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=edit_task)
edit_button.pack(side="left", padx=5)

delete_button = ttk.Button(button_frame, text="–£–¥–∞–ª–∏—Ç—å", command=delete_task)
delete_button.pack(side="left", padx=5)

mark_button = ttk.Button(button_frame, text="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", command=mark_task)
mark_button.pack(side="left", padx=5)

delete_category_button = ttk.Button(button_frame, text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", command=delete_category)
delete_category_button.pack(side="left", padx=5)

sort_alpha_button = ttk.Button(button_frame, text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", command=sort_tasks_alphabetically)
sort_alpha_button.pack(side="left", padx=5)

sort_add_button = ttk.Button(button_frame, text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é", command=sort_tasks_by_addition)
sort_add_button.pack(side="left", padx=5)

# –î–æ–±–∞–≤–ª—è–µ–º Notebook –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
notebook = ttk.Notebook(main_frame)
notebook.pack(fill="both", expand=True, pady=5)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
load_tasks()
update_mark_button_text()

root.mainloop()