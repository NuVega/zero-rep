from abc import ABC, abstractmethod
import random

# ---------------- –û—Ä—É–∂–∏—è ----------------
class Weapon(ABC):
    @abstractmethod
    def attack(self) -> int:
        pass

    @property
    @abstractmethod
    def weapon_type(self) -> str:
        pass

    @property
    @abstractmethod
    def crit_chance(self) -> float:
        pass

    @property
    @abstractmethod
    def crit_multiplier(self) -> float:
        pass

    def calculate_damage(self) -> int:
        base_damage = self.attack()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç
        if random.random() < self.crit_chance:
            crit_damage = int(base_damage * self.crit_multiplier)
            print("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –æ—Ä—É–∂–∏–µ–º! –£—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω!")
            return crit_damage
        return base_damage

class Sword(Weapon):
    def attack(self) -> int:
        print("üó°Ô∏è –ú–æ—â–Ω—ã–π —É–¥–∞—Ä –º–µ—á–æ–º!")
        return random.randint(10, 20)

    @property
    def weapon_type(self) -> str:
        return "slash"

    @property
    def crit_chance(self) -> float:
        return 0.15

    @property
    def crit_multiplier(self) -> float:
        return 2.0

class Bow(Weapon):
    def attack(self) -> int:
        print("üèπ –¢–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª –∏–∑ –ª—É–∫–∞!")
        return random.randint(5, 15)

    @property
    def weapon_type(self) -> str:
        return "pierce"

    @property
    def crit_chance(self) -> float:
        return 0.2

    @property
    def crit_multiplier(self) -> float:
        return 1.5

class Axe(Weapon):
    def attack(self) -> int:
        print("ü™ì –°–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä —Ç–æ–ø–æ—Ä–æ–º!")
        return random.randint(15, 25)

    @property
    def weapon_type(self) -> str:
        return "crush"

    @property
    def crit_chance(self) -> float:
        return 0.1

    @property
    def crit_multiplier(self) -> float:
        return 2.5

class Staff(Weapon):
    def attack(self) -> int:
        print("‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –ø–æ—Å–æ—Ö–æ–º!")
        return random.randint(20, 30)

    @property
    def weapon_type(self) -> str:
        return "magic"

    @property
    def crit_chance(self) -> float:
        return 0.15

    @property
    def crit_multiplier(self) -> float:
        return 2.0


class HealthPotion:
    def __init__(self, heal_amount: int):
        self.heal_amount = heal_amount

    def __str__(self):
        return f"–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è (+{self.heal_amount} HP)"

# ---------------- –§–∞–±—Ä–∏–∫–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤ ----------------
def create_monster():
    monster_data = [
        {
            "name": "–ì–æ–±–ª–∏–Ω",
            "health": random.randint(40, 50),
            "res": {"magic": 0.5},       # –ì–æ–±–ª–∏–Ω —É—Å—Ç–æ–π—á–∏–≤ –∫ –º–∞–≥–∏–∏
            "vul": {"pierce": 1.5},      # –£—è–∑–≤–∏–º –∫ –ª—É–∫—É
            "crit_chance": 0.1,
            "crit_multiplier": 1.5
        },
        {
            "name": "–î—Ä–∞–∫–æ–Ω",
            "health": random.randint(60, 70),
            "res": {"pierce": 0.5, "slash": 0.8},
            "vul": {"magic": 1.5},       # –î—Ä–∞–∫–æ–Ω —É—è–∑–≤–∏–º –∫ –º–∞–≥–∏–∏
            "crit_chance": 0.2,
            "crit_multiplier": 2.0
        },
        {
            "name": "–°–∫–µ–ª–µ—Ç",
            "health": random.randint(40, 50),
            "res": {"slash": 0.5},       # –°–∫–µ–ª–µ—Ç —É—Å—Ç–æ–π—á–∏–≤ –∫ slash
            "vul": {"crush": 1.5},       # –£—è–∑–≤–∏–º –∫ crush (—Ç–æ–ø–æ—Ä—É)
            "crit_chance": 0.1,
            "crit_multiplier": 2.0
        },
        {
            "name": "–¢—Ä–æ–ª–ª—å",
            "health": random.randint(50, 60),
            "res": {"slash": 0.8, "pierce":0.8}, # –¢—Ä–æ–ª–ª—å —É—Å—Ç–æ–π—á–∏–≤ –∫ —Ä—É–±—è—â–µ–º—É –∏ –∫–æ–ª—é—â–µ–º—É
            "vul": {"magic": 1.5},       # –£—è–∑–≤–∏–º –∫ –º–∞–≥–∏–∏
            "crit_chance": 0.1,
            "crit_multiplier": 2.0
        },
        {
            "name": "–û–≥—Ä",
            "health": random.randint(50, 60),
            "res": {"pierce": 0.8},      # —É—Å—Ç–æ–π—á–∏–≤ –∫ –ª—É–∫—É
            "vul": {"crush": 1.5},       # —É—è–∑–≤–∏–º –∫ —Ç–æ–ø–æ—Ä—É
            "crit_chance": 0.05,
            "crit_multiplier": 3.0
        }
    ]

    data = random.choice(monster_data)
    return Monster(
        health=data["health"],
        name=data["name"],
        resistances=data["res"],
        vulnerabilities=data["vul"],
        crit_chance=data["crit_chance"],
        crit_multiplier=data["crit_multiplier"]
    )

# ---------------- –ú–æ–Ω—Å—Ç—Ä ----------------
class Monster:
    def __init__(self, health: int, name: str, resistances: dict, vulnerabilities: dict, crit_chance: float, crit_multiplier: float):
        self.max_health = health
        self.health = health
        self.name = name
        self.resistances = resistances
        self.vulnerabilities = vulnerabilities
        self.crit_chance = crit_chance
        self.crit_multiplier = crit_multiplier

    def take_damage(self, damage: int, weapon_type: str):
        original_damage = damage
        multiplier = 1.0

        if weapon_type in self.resistances:
            multiplier *= self.resistances[weapon_type]

        if weapon_type in self.vulnerabilities:
            multiplier *= self.vulnerabilities[weapon_type]

        final_damage = int(damage * multiplier)

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–∞–µ–º –æ —É—Ä–æ–Ω–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
        if multiplier < 1.0:
            # –£—Ä–æ–Ω —Å–Ω–∏–∂–µ–Ω
            if weapon_type == "pierce":
                print("–°—Ç—Ä–µ–ª—ã –µ–¥–≤–∞ –ø—Ä–æ–±–∏–≤–∞—é—Ç —Ç–æ–ª—Å—Ç—É—é —à–∫—É—Ä—É –º–æ–Ω—Å—Ç—Ä–∞.")
            elif weapon_type == "slash":
                print("–ö–ª–∏–Ω–æ–∫ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏—à—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã.")
            elif weapon_type == "crush":
                print("–£–¥–∞—Ä —Ç–æ–ø–æ—Ä–æ–º –∫–∞–∂–µ—Ç—Å—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–º.")
            elif weapon_type == "magic":
                print("–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤—É—é—Ç —Å–ª–∞–±–æ, –º–æ–Ω—Å—Ç—Ä –ø–æ—á—Ç–∏ –Ω–µ —Å—Ç—Ä–∞–¥–∞–µ—Ç.")
        elif multiplier > 1.0:
            # –£—Ä–æ–Ω –ø–æ–≤—ã—à–µ–Ω
            if weapon_type == "pierce":
                print("–°—Ç—Ä–µ–ª—ã –Ω–∞—Ö–æ–¥—è—Ç —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞, —É—Ä–æ–Ω –ø–æ–≤—ã—à–µ–Ω!")
            elif weapon_type == "slash":
                print("–ö–ª–∏–Ω–æ–∫ –ª–µ–≥–∫–æ —Ä–∞–∑—Ä–µ–∑–∞–µ—Ç –ø–ª–æ—Ç—å, —É—Ä–æ–Ω —É—Å–∏–ª–µ–Ω!")
            elif weapon_type == "crush":
                print("–¢–æ–ø–æ—Ä –Ω–∞–Ω–æ—Å–∏—Ç –≥–ª—É–±–æ–∫–∏–µ –∏ –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã–µ —Ä–∞–Ω—ã!")
            elif weapon_type == "magic":
                print("–ú–∞–≥–∏—è —Å–∂–∏–≥–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞, —É—Ä–æ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–µ–Ω!")

        # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω –∏ –≤—ã–≤–æ–¥–∏–º –∑–¥–æ—Ä–æ–≤—å–µ
        self.health -= final_damage
        print(f"ü©∏ {self.name} –ø–æ–ª—É—á–∞–µ—Ç {final_damage} —É—Ä–æ–Ω–∞.")

        if self.health <= 0:
            print(f"üíÄ –ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω!")
        else:
            print(f"‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–Ω—Å—Ç—Ä–∞: {self.health}/{self.max_health}")

    def is_alive(self):
        return self.health > 0

    def drop_loot(self):
        if random.random() < 0.5:
            heal_amount = random.randint(15, 30)
            print(f"üí∞ {self.name} —É—Ä–æ–Ω–∏–ª –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ +{heal_amount} HP!")
            return HealthPotion(heal_amount)
        return None

    def attack(self, fighter):
        damage = random.randint(5, 15)
        # –ö—Ä–∏—Ç –¥–ª—è –º–æ–Ω—Å—Ç—Ä–∞
        if random.random() < self.crit_chance:
            crit_damage = int(damage * self.crit_multiplier)
            print("üí• –ú–æ–Ω—Å—Ç—Ä –Ω–∞–Ω–æ—Å–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!")
            damage = crit_damage

        fighter.take_damage(damage)

# ---------------- –ë–æ–µ—Ü ----------------
class Fighter:
    def __init__(self, name: str):
        self.name = name
        self._weapon = None
        self.max_health = 100
        self.health = 100
        self.inventory = []

    def change_weapon(self, new_weapon: Weapon):
        self._weapon = new_weapon
        print(f"{self.name} —Ç–µ–ø–µ—Ä—å –≤–æ–æ—Ä—É–∂–µ–Ω: {type(self._weapon).__name__}")

    def attack(self, target: Monster):
        if not self._weapon:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ!")
            return False

        damage = self._weapon.calculate_damage()
        target.take_damage(damage, self._weapon.weapon_type)
        return True

    def take_damage(self, damage: int):
        self.health -= damage
        print(f"üí• {self.name} –ø–æ–ª—É—á–∞–µ—Ç {damage} —É—Ä–æ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—å—è: {self.health}")

    def is_alive(self):
        return self.health > 0

    def heal(self, amount: int):
        old_health = self.health
        self.health = min(self.max_health, self.health + amount)
        print(f"üíö {self.name} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {self.health - old_health} HP! (–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.health})")

    def show_inventory(self):
        if not self.inventory:
            print("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
        else:
            print("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:")
            for i, item in enumerate(self.inventory, 1):
                print(f"{i}. {item}")

    def use_potion(self):
        if not self.inventory:
            print("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–µ–ª–∏–π!")
            return
        print("–í—ã–±–µ—Ä–∏—Ç–µ –∑–µ–ª—å–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        for i, item in enumerate(self.inventory, 1):
            print(f"{i}. {item}")

        while True:
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            if choice.isdigit():
                idx = int(choice) - 1
                if 0 <= idx < len(self.inventory):
                    potion = self.inventory.pop(idx)
                    if isinstance(potion, HealthPotion):
                        self.heal(potion.heal_amount)
                    return
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# ---------------- –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä—ã ----------------
class GameManager:
    def __init__(self):
        self.player = None
        self.monster = None
        self.weapons = {
            '1': Sword,
            '2': Bow,
            '3': Axe,
            '4': Staff
        }

    def create_player(self):
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –≥–µ—Ä–æ—è: ")
        self.player = Fighter(name)

    def create_monster(self):
        self.monster = create_monster()
        print(f"\nüßü –ü–æ—è–≤–∏–ª—Å—è –º–æ–Ω—Å—Ç—Ä: {self.monster.name} —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º {self.monster.health}!")

    def choose_weapon_for_player(self):
        self._print_weapon_choices()
        while True:
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")
            if choice in self.weapons:
                weapon_class = self.weapons[choice]
                self.player.change_weapon(weapon_class())
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def change_weapon_mid_battle(self):
        print("\n‚öîÔ∏è –°–º–µ–Ω–∞ –æ—Ä—É–∂–∏—è –≤–æ –≤—Ä–µ–º—è –±–æ—è!")
        self._print_weapon_choices()
        while True:
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")
            if choice in self.weapons:
                weapon_class = self.weapons[choice]
                self.player.change_weapon(weapon_class())
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def _print_weapon_choices(self):
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ:")
        print("1. –ú–µ—á (slash, 10-20 —É—Ä–æ–Ω–∞, crit 15%, x2)")
        print("2. –õ—É–∫ (pierce, 5-15 —É—Ä–æ–Ω–∞, crit 20%, x1.5)")
        print("3. –¢–æ–ø–æ—Ä (crush, 15-25 —É—Ä–æ–Ω–∞, crit 10%, x2.5)")
        print("4. –ü–æ—Å–æ—Ö (magic, 20-30 —É—Ä–æ–Ω–∞, crit 15%, x2)")

    def battle(self):
        self.choose_weapon_for_player()
        print(f"\n‚öîÔ∏è –ë–∏—Ç–≤–∞ {self.player.name} –ø—Ä–æ—Ç–∏–≤ {self.monster.name}!")

        while self.player.is_alive() and self.monster.is_alive():
            print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —É–¥–∞—Ä–∞, 'w' –¥–ª—è —Å–º–µ–Ω—ã –æ—Ä—É–∂–∏—è –∏–ª–∏ 'p' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–µ–ª—å—è.")
            action = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip().lower()

            player_attacked = False

            if action == "w":
                self.change_weapon_mid_battle()
                # –ù–µ –∞—Ç–∞–∫—É–µ–º
            elif action == "p":
                if not self.player.inventory:
                    print("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–µ–ª–∏–π!")
                else:
                    self.player.use_potion()
                # –ù–µ –∞—Ç–∞–∫—É–µ–º, –º–æ–Ω—Å—Ç—Ä –Ω–µ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–µ—Ç
            else:
                # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
                self.player.attack(self.monster)
                player_attacked = True

            if not self.monster.is_alive():
                print(f"\nüèÜ {self.player.name} –ø–æ–±–µ–¥–∏–ª —á—É–¥–æ–≤–∏—â–µ!")
                loot = self.monster.drop_loot()
                if loot:
                    self.player.inventory.append(loot)
                return True

            # –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª
            if player_attacked and self.monster.is_alive():
                self.monster.attack(self.player)
                if not self.player.is_alive():
                    print(f"\nüíÄ {self.player.name} –ø–æ–≥–∏–± –≤ –±–æ—é —Å —á—É–¥–æ–≤–∏—â–µ–º!")
                    return False

    def between_battles_menu(self):
        while True:
            print("\n–ß—Ç–æ –¥–∞–ª—å—à–µ?")
            print("1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π –±–æ–π")
            print("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
            print("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ")
            print("4. –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")

            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            if choice == '1':
                return True
            elif choice == '2':
                self.player.show_inventory()
            elif choice == '3':
                if not self.player.inventory:
                    print("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–µ–ª–∏–π!")
                else:
                    self.player.use_potion()
            elif choice == '4':
                return False
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

    def start_game(self):
        # –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è
        print("–°—Ç–æ–ª—å–∫–æ –±–æ–ª–∏...")
        input("(–ù–∞–∂–º–∏—Ç–µ Enter)")

        print("–°—Ç–æ–ª—å–∫–æ –∫—Ä–æ–≤–∏...")
        input("(–ù–∞–∂–º–∏—Ç–µ Enter)")

        print("–í –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã –Ω–µ –≤–∏–¥–µ–ª–∏ –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ —Å–º–µ—Ä—Ç–∏.")
        input("(–ù–∞–∂–º–∏—Ç–µ Enter)")

        print("–ü–æ—Ä–æ—é –≤—ã —Å —Ç—Ä—É–¥–æ–º –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è...")
        input("(–ù–∞–∂–º–∏—Ç–µ Enter)")

        name = input("–£ —á–µ–ª–æ–≤–µ–∫–∞ –∂–µ –µ—Å—Ç—å –∏–º—è. –ö–∞–∫ —Ç–∞–º –º–æ–µ... –ê—Ö, –¥–∞: ")
        while not name.strip():
            name = input("[–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è] ")

        print(f"{name}... –®–µ–ø—Ç–∞–ª–∞ –æ–Ω–∞ —Å –ª—é–±–æ–≤—å—é, –∫–æ–≥–¥–∞ –≤—ã –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –æ–¥–Ω–∏.")
        input("(–ù–∞–∂–º–∏—Ç–µ Enter)")

        print(f"{name}!!! –û—Ç—á–∞—è–Ω–Ω–æ –∫—Ä–∏—á–∞–ª–∞ –æ–Ω–∞, –∫–æ–≥–¥–∞ –≤—ã –Ω–µ –º–æ–≥–ª–∏ –µ–µ —Å–ø–∞—Å—Ç–∏.")
        input("(–ù–∞–∂–º–∏—Ç–µ Enter)")

        print("–¢–µ–ø–µ—Ä—å —ç—Ç–æ –∏–º—è ‚Äî –Ω–µ–≥–∞—Å–Ω—É—â–µ–µ —ç—Ö–æ –≤ –≤–∞—à–µ–π –≥–æ–ª–æ–≤–µ. –í–∞—à –¥–æ–º –±—ã–ª —Å–æ–∂–∂–µ–Ω, –≤–∞—à –Ω–∞—Ä–æ–¥ —É–±–∏—Ç.")
        input("(–ù–∞–∂–º–∏—Ç–µ Enter)")

        print("–õ–∏—à—å —è—Ä–æ—Å—Ç—å –∏ –∂–∞–∂–¥–∞ –º–µ—Å—Ç–∏ –¥–≤–∏–∂—É—Ç –≤–∞–º–∏ –≤–ø–µ—Ä–µ–¥.")
        input("(–ù–∞–∂–º–∏—Ç–µ Enter)")

        print("–í—ã –ø–æ–∫–ª—è–ª–∏—Å—å —Å—Ç–µ—Ä–µ—Ç—å —Å –ª–∏—Ü–∞ –∑–µ–º–ª–∏ –∫–∞–∂–¥–æ–µ –æ—Ç—Ä–æ–¥—å–µ, —á—Ç–æ –ø–æ–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤–∞–º –Ω–∞ –ø—É—Ç–∏. –ò –≤–∞—à –ø—É—Ç—å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω...")
        input("(–ù–∞–∂–º–∏—Ç–µ Enter)")

        # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        self.player = Fighter(name)

        player_survived = True

        while True:
            self.create_monster()
            result = self.battle()

            if not result:
                # –ò–≥—Ä–æ–∫ —É–º–µ—Ä
                player_survived = False
                print("\nüé≤ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ. –í–∞—à –ø–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω.")
                break

            continue_game = self.between_battles_menu()
            if not continue_game:
                break

        if player_survived:
            print("üëã –í—ã —É—Ö–æ–¥–∏—Ç–µ –≤ –∑–∞–∫–∞—Ç. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã –Ω–∞–π–¥—ë—Ç–µ –Ω–æ–≤—ã–π –ø—É—Ç—å –≤ –∂–∏–∑–Ω–∏...")

def main():
    game = GameManager()
    game.start_game()

if __name__ == "__main__":
    main()